apiVersion: v1
kind: Namespace
metadata:
  name: devops-assignment
---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: flask-vol
  namespace: devops-assignment
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: devops-assignment
  labels:
    app: flask-uploader
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-uploader
  template:
    metadata:
      labels:
        app: flask-uploader
    spec:
      containers:
      - name: uploader
        image: kentvilhelmsen/flask-app
        ports:
        - containerPort: 5000
        volumeMounts:
        - mountPath: /tmp
          name: flask-data
      restartPolicy: Always
      volumes:
      - name: flask-data
        persistentVolumeClaim:
          claimName: flask-vol
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: flask-uploader
  name: app
  namespace: devops-assignment
spec:
  ports:
  - nodePort: 32518
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: flask-uploader
  type: NodePort
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app: prometheus-operator-prometheus
    chart: prometheus-operator-8.5.6
    heritage: Helm
    release: prometheus-operator
  name: envoy-proxy
  namespace: monitoring
spec:
  endpoints:
  - interval: 30s
    path: /stats/prometheus
    targetPort: 8001
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      app: envoy-proxy
---
apiVersion: v1
data:
  config.yaml: |
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 80
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              access_log:
              - name: envoy.file_access_log
                config:
                  path: "/dev/stdout"
              codec_type: auto
              stat_prefix: ingress_http
              use_remote_address: true
              http_protocol_options:
                accept_http_10: true
              route_config:
                name: local_route
                virtual_hosts:
                - name: "flask"
                  domains:
                  - "flask:*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: flask-app
                - name: "prometheus"
                  domains:
                  - "prometheus:*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: prometheus
                - name: "grafana"
                  domains:
                  - "grafana:*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: grafana
              http_filters:
              - name: envoy.router
                config: {}

      clusters:
      - name: flask-app
        http_protocol_options: {}
        connect_timeout: 3s
        type: strict_dns
        dns_lookup_family: v4_only
        lb_policy: least_request
        hosts:
        - socket_address:
              address: app.devops-assignment.svc.cluster.local
              port_value: 5000
      - name: prometheus
        http_protocol_options: {}
        connect_timeout: 3s
        type: strict_dns
        dns_lookup_family: v4_only
        lb_policy: least_request
        hosts:
        - socket_address:
              address: prometheus-operator-prometheus.monitoring.svc.cluster.local
              port_value: 9090
      - name: grafana
        http_protocol_options: {}
        connect_timeout: 3s
        type: strict_dns
        dns_lookup_family: v4_only
        lb_policy: least_request
        hosts:
        - socket_address:
              address: prometheus-operator-grafana.monitoring.svc.cluster.local
              port_value: 80

    admin:
      access_log_path: "/dev/null"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001

kind: ConfigMap
metadata:
  name: envoy-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: envoy-proxy
  name: envoy-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-proxy
  template:
    metadata:
      labels:
        app: envoy-proxy
      namespace: default
    spec:
      containers:
      - args:
        - -c
        - /etc/envoy/config.yaml
        - --service-cluster
        - envoy-proxy
        command:
        - envoy
        image: envoyproxy/envoy:v1.12.2
        imagePullPolicy: Always
        name: envoy
        ports:
        - containerPort: 80
          protocol: TCP
        - containerPort: 443
          protocol: TCP
        - containerPort: 8001
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
      restartPolicy: Always
      volumes:
      - configMap:
          name: envoy-config
        name: envoy-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: envoy-proxy
  name: envoy-proxy
  namespace: default
spec:
  ports:
  - name: port-1
    nodePort: 30846
    port: 80
    protocol: TCP
    targetPort: 80
  - name: port-2
    nodePort: 30107
    port: 8001
    protocol: TCP
    targetPort: 8001
  selector:
    app: envoy-proxy
  type: NodePort
